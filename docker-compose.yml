version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: webstudio
      POSTGRES_USER: webstudio
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your-strong-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U webstudio"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgREST API
  postgrest:
    image: postgrest/postgrest:v12.0.2
    restart: always
    environment:
      PGRST_DB_URI: postgres://webstudio:${POSTGRES_PASSWORD:-your-strong-password}@postgres:5432/webstudio
      PGRST_DB_SCHEMA: public
      PGRST_DB_ANON_ROLE: webstudio
      PGRST_JWT_SECRET: ${PGRST_JWT_SECRET:-your-jwt-secret-key}
      PGRST_JWT_AUD: webstudio
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy

  # Webstudio Builder Application
  webstudio:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    restart: always
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://webstudio:${POSTGRES_PASSWORD:-your-strong-password}@postgres:5432/webstudio?pgbouncer=true
      DIRECT_URL: postgres://webstudio:${POSTGRES_PASSWORD:-your-strong-password}@postgres:5432/webstudio
      POSTGREST_URL: http://postgrest:3000
      POSTGREST_API_KEY: ${POSTGREST_API_KEY:-your-postgrest-api-key}
      AUTH_SECRET: ${AUTH_SECRET:-your-auth-secret}
      BUILD_ORIGIN: ${BUILD_ORIGIN:-https://your-domain.com}
      FEATURES: "*"
      USER_PLAN: pro
      # Optional: Configure S3 for asset storage
      # S3_BUCKET: your-bucket
      # S3_REGION: your-region
      # S3_ACCESS_KEY_ID: your-access-key
      # S3_SECRET_ACCESS_KEY: your-secret-key
      # S3_ENDPOINT: your-endpoint
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      postgrest:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional but recommended)
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - webstudio
    profiles:
      - with-proxy

volumes:
  postgres_data:
