version: "3.8"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 5173
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/webstudio
    depends_on:
      - db
      - rest
    networks:
      - dokploy-network
    command: sh -c "pnpm migrations migrate && pnpm start"  # Adjust to your start command; for dev: pnpm run dev

  db:
    image: ghcr.io/supabase/postgres:15.1.1.55
    command: ["postgres", "-c", "log_statement=all", "-c", "listen_addresses=*"]
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: webstudio
      POSTGRES_USER: postgres
    ports:
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d webstudio"]
      interval: 10s
      timeout: 5s
      retries: 25
    networks:
      - dokploy-network

  rest:
    image: postgrest/postgrest:v12.2.0
    restart: unless-stopped
    environment:
      PGRST_DB_URI: postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/webstudio
      PGRST_DB_SCHEMAS: ${PGRST_DB_SCHEMAS:-public}
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"
      PGRST_APP_SETTINGS_JWT_SECRET: ${JWT_SECRET}
      PGRST_APP_SETTINGS_JWT_EXP: ${JWT_EXPIRY}
    command: "postgrest"
    ports:
      - 3002
    depends_on:
      db:
        condition: service_healthy
    networks:
      - dokploy-network


volumes:
  postgres-data:

networks:
  dokploy-network:
    external: true
